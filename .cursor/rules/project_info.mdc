---
description: Core project information and architecture for the Naja snake game
globs:
  - "**/*.py"
  - "**/*.md"
  - "**/*.toml"
alwaysApply: true
---

# Naja Project - Core Information

## Project Identity
- **Name**: Naja (formerly KobraPy)
- **Type**: Classic snake game in Python using Pygame
- **Purpose**: Educational project for learning open-source development practices
- **License**: GPL-3.0-or-later
- **Python Version**: 3.12+
- **Main Dependency**: Pygame 2.6.1+

## Architecture Overview
- **ECS (Entity-Component-System)**: Modular architecture with clear separation of concerns
- **Core Principles**:
  - **Entities**: Just IDs that group components
  - **Components**: Pure data classes (no logic)
  - **Systems**: All game logic, inheriting from GameSystem base
- **Main Modules**:
  - `src/core/`: Game loop, clock, pygame IO adapter
  - `src/ecs/`: World registry, components, systems, prefabs
  - `src/game/`: Scenes, services, config, settings
  - `kobra.py`: Thin bootstrap entrypoint only

## Key Files and Directories
- `kobra.py`: Bootstrap entry point
- `pyproject.toml`: Project metadata and dependencies
- `src/core/app.py`: Main game loop orchestrator
- `src/ecs/world.py`: Entity registry and component storage
- `src/ecs/components/`: Pure data components (Position, Velocity, etc.)
- `src/ecs/systems/`: Logic systems (Movement, Collision, Render, etc.)
- `src/ecs/prefabs/`: Entity factory functions
- `src/game/scenes/`: Scene managers (menu, gameplay, game_over)
- `src/game/services/`: Singleton services (assets, audio)
- `docs/architecture.md`: ECS architecture explanation
- `docs/adr/0001-choose-ecs.md`: Architecture decision record
- `docs/manual.md`: User documentation
- `docs/CONTRIBUTING.md`: Contribution guidelines
- `assets/font/`: GetVoIP Grotesque font files
- `assets/sound/`: Game sound effects
- `tests/ecs/`: System unit tests
- `tests/game/`: Integration tests

## Documentation
See `.cursor/rules/` for AI assistant guidelines:
- `ecs_overview.mdc`: Architecture overview and principles
- `ecs_coding_standards.mdc`: Code style for ECS
- `ecs_testing.mdc`: Testing strategies
- `contribution_workflow.mdc`: Git workflow and branching
- `project_info.mdc`: This file

See `docs/` for human-readable documentation:
- `docs/architecture.md`: Complete ECS architecture guide
- `docs/CONTRIBUTING.md`: How to contribute
- `docs/manual.md`: User manual
- `docs/adr/0001-choose-ecs.md`: Why we chose ECS

## Development Standards
- **Formatter**: Black
- **Linter**: Ruff
- **Pre-commit hooks**: Enabled (format + lint)
- **Branch strategy**: GitFlow (main, dev, feat/*, hot/*)
- **Commit format**: `tag: imperative description`
  - Tags: code, doc, build, repo, minor, other
- **All contributions must relate to a GitHub issue**
