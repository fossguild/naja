---
description: Git workflow, branching strategy, and contribution guidelines for Naja
globs:
  - "**/*"
alwaysApply: true
---

# Contribution Workflow

## GitFlow Branching Strategy

### Permanent Branches

**main**
- Stable, production-ready code
- Tagged with version numbers (Semantic Versioning)
- Only receives merges from `rel/*` or `hot/*` branches
- Never commit directly to main

**dev** (develop)
- Active development branch
- Integration branch for features
- Should always be in a working state
- Merges into `main` for releases

### Temporary Branches

**Feature branches** (`feat/<issue-number>/<description>`)
- Branch from: `dev`
- Merge into: `dev`
- Purpose: New features or enhancements
- Example: `feat/42/add-collision-system`, `feat/15/implement-snake-prefab`

**Hotfix branches** (`hot/<issue-number>/<description>`)
- Branch from: `main`
- Merge into: `main` AND `dev`
- Purpose: Critical bug fixes for production
- Example: `hot/66/fix-crash-on-startup`

**Work-in-progress** (`wip/<issue-number>/<description>`)
- Branch from: `dev`
- Merge into: `dev` (when ready)
- Purpose: Experimental or incomplete work
- Example: `wip/24/multiplayer-prototype`

**Release branches** (`rel/<version>`)
- Branch from: `dev`
- Merge into: `main` AND `dev`
- Purpose: Release preparation, bug fixes only
- Example: `rel/1.0.0-beta`

**Auxiliary branches** (`aux/<description>`)
- Branch from: `dev`
- Merge into: `dev`
- Purpose: Miscellaneous tasks not related to issues
- Example: `aux/update-dependencies`

### Branch Naming Rules

**Correct**:
```
feat/15/add-movement-system
feat/42/implement-render-system
hot/23/fix-apple-spawn-collision
wip/8/experiment-with-particle-effects
rel/1.0.0
aux/update-ecs-documentation
```

**Incorrect**:
```
feature-15-settings-menu  (use feat)
FEAT/15/Settings Menu     (use lowercase)
15-settings-menu          (missing prefix)
feat/settings             (missing issue number)
```

## Commit Message Format

### Structure
```
tag: imperative short description

[Optional longer explanation with proper grammar and punctuation.
Explain the "why" behind the change, not the "what".]
```

### Commit Tags

- `code`: Source code fixes, additions, or refactoring
- `doc`: Documentation changes
- `build`: Build system or dependency changes
- `repo`: Repository organization and maintenance
- `minor`: Trivial changes (typos, whitespace, comments)
- `other`: Anything that doesn't fit above categories

### Examples

**Good commits**:
```
code: add MovementSystem with grid wrapping logic

Implements entity position updates based on velocity components.
Handles edge wrapping for non-electric wall mode.

code: extract collision detection to CollisionSystem

Separates collision logic from entity classes. Emits events
instead of directly modifying game state.

doc: add ECS architecture overview to documentation

build: add pytest for system unit testing

minor: fix typo in Position component docstring
```

**Bad commits**:
```
Fixed bug                    (no tag, not descriptive)
code: Fixed the thing        (not imperative, vague)
added new feature for menu   (no tag)
WIP                          (not descriptive)
```

## Pull Request Workflow

### Before Creating PR

1. **Link to Issue**: PR must relate to an open GitHub issue
2. **Branch from correct base**: `feat/*` from `dev`, `hot/*` from `main`
3. **Run quality checks**:
   ```bash
   black .                    # format code
   ruff check .               # lint code
   pytest tests/              # run tests
   python kobra.py            # manual test game
   ```
4. **Update documentation**: If adding features, update relevant docs
5. **Review your own changes**: Check diff for unintended changes
6. **ECS-specific checks**:
   - Components are pure data (no methods)
   - Systems have single responsibility
   - No circular dependencies between modules

### PR Title Format
```
[TAG] Brief description (closes #issue-number)
```

Examples:
- `[FEAT] Add CollisionSystem for entity interactions (closes #42)`
- `[FIX] Fix SpawnSystem retry logic for occupied cells (closes #23)`
- `[REFACTOR] Extract rendering to RenderSystem (closes #15)`
- `[DOC] Update ECS architecture documentation (closes #8)`

### PR Description Template

```markdown
## Description
Brief summary of changes.

## Related Issue
Closes #[issue-number]

## Changes Made
- Specific change 1
- Specific change 2
- Specific change 3

## Testing
- [ ] Unit tests added/updated
- [ ] All tests passing (`pytest tests/`)
- [ ] Manual testing completed
- [ ] Black formatting passed
- [ ] Ruff linting passed
- [ ] Pre-commit hooks passed
- [ ] Game runs without errors

## ECS-Specific Checklist (if applicable)
- [ ] Components are pure data (dataclasses, no methods)
- [ ] Systems inherit from GameSystem
- [ ] System has single responsibility
- [ ] System documents reads/writes/queries in docstring
- [ ] No circular imports between modules
- [ ] Prefabs register entities with world correctly

## Screenshots (if UI changes)
[Add screenshots if applicable]

## General Checklist
- [ ] Code follows project style guidelines (see `ecs_coding_standards.mdc`)
- [ ] Comments start with lowercase letters
- [ ] No em dash characters used
- [ ] Type hints on all public interfaces
- [ ] Documentation updated (if needed)
- [ ] Copyright notice updated (if substantial changes)
- [ ] No unrelated changes included
```

## Issue Tracking

### Creating Issues

**Required elements**:
- Clear, descriptive title
- Description of problem or feature request
- Steps to reproduce (for bugs)
- Expected vs. actual behavior (for bugs)
- Relevant labels (bug, enhancement, documentation, etc.)
- Assignment to milestone (if applicable)

### Issue Labels

- `bug`: Something isn't working
- `enhancement`: New feature or improvement
- `documentation`: Documentation updates
- `good first issue`: Good for newcomers
- `help wanted`: Extra attention needed
- `wontfix`: Will not be worked on
- `duplicate`: Issue already exists

### Milestones

Example milestone structure:
- `v1.0.0-alpha`: Initial feedback release
- `v1.0.0-beta`: Feature freeze, testing phase
- `v1.0.0`: Stable release

## Semantic Versioning

Format: `MAJOR.MINOR.PATCH[-PRERELEASE]`

- `MAJOR`: Incompatible API changes
- `MINOR`: New features, backwards-compatible
- `PATCH`: Bug fixes, backwards-compatible
- `PRERELEASE`: `-alpha`, `-beta`, `-rc1`, etc.

Examples:
- `0.1.0`: Initial development
- `1.0.0-alpha`: First test release
- `1.0.0-beta`: Feature-complete test
- `1.0.0`: First stable release
- `1.1.0`: Added features to stable
- `1.1.1`: Bug fix release

## Copyright and Licensing

### Adding Your Name

Add your copyright notice when you:
- Substantially modify an existing file (not just typos)
- Create a new file
- Copy/paste significant code

**Format**:
```python
# Copyright (c) 2023, Monaco F. J. <monaco@usp.br>
# Copyright (c) 2024, Your Name <your.email@example.com>
```

### Derivative Work Notice

If copying from KobraPy, add:
```python
# This file is a derivative work of KobraPy
# Original: https://github.com/fossguild/kobrapy
```

### License Header

All source files must include GPL license header:
```python
#   This file is part of Naja.
#
#   Naja is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
```

## Code Review Guidelines

### For Authors

- Keep PRs focused and small
- Respond promptly to feedback
- Don't take criticism personally
- Update PR based on review comments
- Mark resolved conversations

### For Reviewers

- Be respectful and constructive
- Suggest specific improvements
- Explain reasoning behind requests
- Approve when standards are met
- Check: code style, logic, testing, docs
- ECS-specific review points:
  - Verify components are data-only
  - Verify systems don't call other systems directly
  - Check system execution order makes sense
  - Ensure no game logic in RenderSystem

## Development Environment Setup

```bash
# Clone repository
git clone https://github.com/fossguild/naja.git
cd naja

# Switch to dev branch
git checkout dev

# Install dependencies
uv sync --group dev

# Install pre-commit hooks
pre-commit install

# Familiarize yourself with ECS architecture
# Read .cursor/rules/ecs_overview.mdc
# Read docs/architecture.md

# Create feature branch
git checkout -b feat/123/add-scoring-system

# Make changes, run tests
pytest tests/
black .
ruff check .

# Commit and push
git add .
git commit -m "code: add ScoringSystem for point tracking"
git push -u origin feat/123/add-scoring-system

# Create pull request on GitHub
```

## Quality Checklist

Before submitting PR:

### Code Quality
- [ ] Code is Black-formatted
- [ ] No Ruff linting errors
- [ ] Type hints on all public interfaces
- [ ] Comments start with lowercase
- [ ] No em dash characters

### Testing
- [ ] Unit tests written for new code
- [ ] All tests passing (`pytest tests/`)
- [ ] Manual testing completed
- [ ] Game behavior unchanged (unless intended)

### ECS Architecture (if applicable)
- [ ] Components are pure data (no logic)
- [ ] Systems inherit from GameSystem
- [ ] System has clear single responsibility
- [ ] No circular imports
- [ ] Follows patterns in `ecs_coding_standards.mdc`

### Git Workflow
- [ ] All commits follow message format
- [ ] Branch name follows convention
- [ ] Linked to GitHub issue
- [ ] PR description complete

### Documentation
- [ ] Documentation updated (if needed)
- [ ] Copyright notice updated (if substantial changes)
- [ ] ECS docs updated (if adding system/component)
- [ ] No unrelated changes

## ECS-Specific Contribution Guidelines

### Adding a New Component
1. Create file in `src/ecs/components/`
2. Use `@dataclass` decorator
3. Pure data only, no methods
4. Add docstring explaining purpose
5. Update `ecs_entities_components.mdc`
6. Add component to relevant prefabs
7. Write tests in `tests/ecs/test_components.py`

### Adding a New System
1. Create file in `src/ecs/systems/`
2. Inherit from `GameSystem`
3. Override `update(dt_ms)` method
4. Document reads/writes/queries in docstring
5. Update `ecs_systems.mdc` with system details
6. Add to system execution order in scene
7. Write unit tests in `tests/ecs/test_<system_name>.py`

### Adding a New Prefab
1. Create file in `src/ecs/prefabs/`
2. Factory function returns entity ID
3. Registers all necessary components
4. Document which components are added
5. Write tests in `tests/game/test_prefabs.py`

### Modifying Existing Systems
- Maintain backward compatibility when possible
- Update tests to reflect changes
- Document breaking changes in PR description
- Verify system execution order still makes sense

## Resources

### Git and Versioning
- [GitFlow Model](https://nvie.com/posts/a-successful-git-branching-model/)
- [Semantic Versioning](https://semver.org/)
- [REUSE Specification](https://reuse.software/)
- [Keep a Changelog](https://keepachangelog.com/)

### ECS Architecture
- [Entity-Component-System FAQ](https://github.com/SanderMertens/ecs-faq)
- [Game Programming Patterns: Component](https://gameprogrammingpatterns.com/component.html)
- Project docs: `.cursor/rules/ecs_*.mdc` files
- Project docs: `docs/architecture.md`
