---
description: "Estrutura de diretórios e arquivos do projeto Naja ECS"
globs: ["**/*"]
---

# Project Structure

## Directory Tree

```
naja/
├── kobra.py                          # thin bootstrap entrypoint only
├── pyproject.toml                    # project metadata, dependencies
├── uv.lock                           # locked dependency versions
├── Makefile                          # common tasks: run, test, lint, format
├── .pre-commit-config.yaml           # git hooks configuration
├── .ruff.toml                        # linter configuration
├── README.md                         # project overview
├── LICENSE                           # GPL-3.0-or-later license text
├── AUTHORS                           # contributor list
├── COPYING                           # license notice
│
├── .cursor/                          # cursor IDE rules
│   └── rules/                        # mdc rule files
│       ├── contribution_workflow.mdc
│       ├── project_info.mdc
│       ├── ecs_overview.mdc
│       ├── ecs_entities_components.mdc
│       ├── ecs_systems.mdc
│       ├── ecs_base_system.mdc
│       ├── ecs_render_system.mdc
│       ├── ecs_ui_system.mdc
│       ├── ecs_project_structure.mdc
│       ├── ecs_migration_plan.mdc
│       ├── ecs_coding_standards.mdc
│       └── ecs_testing.mdc
│
├── .claude/                          # claude AI context
│   └── CLAUDE.md
│
├── docs/                             # documentation
│   ├── architecture.md               # ECS architecture explanation
│   ├── manual.md                     # user manual
│   ├── CONTRIBUTING.md               # contribution guidelines
│   ├── issues.md                     # known issues and feature requests
│   ├── adr/                          # architecture decision records
│   │   └── 0001-choose-ecs.md
│   └── assignment/                   # course materials
│       └── (existing assignment files)
│
├── assets/                           # game assets
│   ├── font/                         # GetVoIP Grotesque font files
│   │   ├── (font files)
│   ├── sound/                        # sound effects and music
│   │   ├── (audio files)
│   └── sprites/                      # future sprite assets
│       └── (placeholder)
│
├── src/                              # source code
│   ├── core/                         # core engine systems
│   │   ├── app.py                    # main game loop orchestrator
│   │   ├── clock.py                  # fixed timestep implementation
│   │   └── io/
│   │       └── pygame_adapter.py     # pygame event, screen, draw wrappers
│   │
│   ├── ecs/                          # ECS framework
│   │   ├── world.py                  # entity registry, component storage, system manager
│   │   │
│   │   ├── components/               # pure data components
│   │   │   ├── position.py           # (x, y) location
│   │   │   ├── velocity.py           # (dx, dy) direction
│   │   │   ├── snake_body.py         # segments, length, growth queue
│   │   │   ├── apple.py              # edible component
│   │   │   ├── obstacle.py           # obstacle tag
│   │   │   ├── renderable.py         # shape, color, layer
│   │   │   ├── collider.py           # collision boundaries
│   │   │   ├── score.py              # current score, high score
│   │   │   ├── grid.py               # cols, rows, cell_size
│   │   │   ├── flags.py              # paused, game_over, debug
│   │   │   ├── difficulty.py         # level, obstacle_count, speed
│   │   │   ├── palette.py            # color scheme
│   │   │   ├── interpolation.py      # smooth position data
│   │   │   ├── audio_queue.py        # pending audio events
│   │   │   ├── music_state.py        # background music state
│   │   │   └── ui_state.py           # UI overlay state
│   │   │
│   │   ├── systems/                  # logic systems
│   │   │   ├── input.py              # event to command conversion
│   │   │   ├── movement.py           # position updates, wrapping
│   │   │   ├── collision.py          # collision detection, events
│   │   │   ├── spawn.py              # entity creation
│   │   │   ├── scoring.py            # score updates
│   │   │   ├── audio.py              # sound playback
│   │   │   ├── render.py             # game world rendering
│   │   │   ├── ui.py                 # UI overlays, menu flows
│   │   │   ├── interpolation.py      # smooth position calculation
│   │   │   ├── settings_apply.py     # runtime settings changes
│   │   │   ├── validation.py         # state integrity checks
│   │   │   ├── obstacle_generation.py # constructive obstacle placement
│   │   │   └── resize.py             # window resize handling
│   │   │
│   │   └── prefabs/                  # entity factories
│   │       ├── snake.py              # create_snake()
│   │       ├── apple.py              # create_apple()
│   │       └── obstacle_field.py     # create_obstacles()
│   │
│   ├── game/                         # game-specific code
│   │   ├── scenes/                   # scene managers
│   │   │   ├── menu.py               # main menu scene
│   │   │   ├── gameplay.py           # gameplay scene, system registration
│   │   │   └── game_over.py          # game over scene
│   │   │
│   │   ├── services/                 # singleton services
│   │   │   ├── assets.py             # asset loading, caching
│   │   │   └── audio.py              # audio bus, mixer channels
│   │   │
│   │   ├── config.py                 # screen detection, dimensions
│   │   ├── constants.py              # colors, cell sizes, defaults
│   │   └── settings.py               # runtime options, validation
│   │
│   └── (old files to be removed during migration)
│       ├── entities.py               # old Snake, Apple, Obstacle classes
│       ├── state.py                  # old GameState class
│       ├── assets.py                 # old assets loading
│       ├── config.py                 # old config (similar to new one)
│       ├── constants.py              # old constants (similar to new one)
│       └── settings.py               # old settings (similar to new one)
│
└── tests/                            # test suite
    ├── ecs/                          # ECS unit tests
    │   ├── test_world.py             # world registry tests
    │   ├── test_components.py        # component data tests
    │   ├── test_movement_system.py   # movement logic tests
    │   ├── test_collision_system.py  # collision detection tests
    │   ├── test_spawn_system.py      # spawning logic tests
    │   └── test_interpolation.py     # interpolation math tests
    │
    └── game/                         # game-specific tests
        ├── test_prefabs.py           # entity factory tests
        ├── test_settings.py          # settings validation tests
        └── test_integration.py       # full game flow tests
```

## File Responsibilities

### Root Files

**kobra.py**
- Entry point only, minimal logic
- Initializes pygame and services
- Creates main app and runs game loop

**pyproject.toml**
- Project metadata (name, version, description)
- Python version requirement (3.12+)
- Dependencies: pygame 2.6.1+
- Dev dependencies: black, ruff, pytest
- Build system configuration

**Makefile**
- `make run` - run the game
- `make test` - run test suite
- `make lint` - run ruff linter
- `make format` - run black formatter
- `make clean` - remove generated files

**.pre-commit-config.yaml**
- Git hooks for automatic linting and formatting
- Runs black, ruff on commit
- Prevents commits with linter errors

**.ruff.toml**
- Ruff linter configuration
- Enables/disables specific rules
- Configures line length, ignore patterns

### Core Module (src/core/)

**app.py**
- Main game loop
- Fixed timestep implementation
- Scene management
- System update orchestration
- Frame limiting, delta time calculation

**clock.py**
- Timestep utilities
- Frame timing helpers
- Delta time smoothing

**io/pygame_adapter.py**
- Pygame event polling wrapper
- Screen initialization and resize
- Basic drawing primitives (rect, circle, line)
- No game logic, just IO abstraction

### ECS Module (src/ecs/)

**world.py**
- Entity ID generation
- Component storage (maps entity_id -> component instances)
- System registration and execution order
- Entity/component queries
- Event bus for inter-system communication

**components/**
- One file per component type
- Simple dataclasses, no methods
- Docstring explains purpose and which entities use it

**systems/**
- One file per system
- Each inherits from GameSystem
- Implements update(dt_ms) method
- Documents reads, writes, queries

**prefabs/**
- Factory functions that create entities
- Compose multiple components into common patterns
- Handle entity registration with world

### Game Module (src/game/)

**scenes/**
- Scene = a game mode (menu, gameplay, game over)
- Each scene registers systems in specific order
- Handles scene transitions

**services/**
- Singleton services for shared resources
- AssetManager: load and cache fonts, sounds, sprites
- AudioBus: manage multiple audio channels and music

**config.py**
- Screen size detection
- Grid dimension calculation
- File path constants

**constants.py**
- Default colors
- Default cell sizes
- Default speeds
- Magic numbers

**settings.py**
- Runtime configurable options
- Setting validation logic
- Load/save settings to file

### Tests Module (tests/)

**ecs/**
- Unit tests for individual systems
- Mock component data
- Verify logic without window

**game/**
- Integration tests for full game scenarios
- Prefab creation tests
- Settings validation tests

## Naming Conventions

### Files
- All lowercase
- Underscores for multi-word names
- Match the primary class/function name
- Example: `obstacle_generation.py` contains `ObstacleGenerationSystem`

### Classes
- PascalCase
- Descriptive names
- Component suffix for components: `PositionComponent` or just `Position`
- System suffix for systems: `MovementSystem`
- Example: `SnakeBodyComponent`, `CollisionSystem`

### Functions
- snake_case
- Verb or verb_noun pattern
- Example: `create_snake()`, `validate_grid_size()`

### Variables
- snake_case
- Descriptive names, avoid abbreviations
- Example: `entity_id`, `selected_index`, `needs_reset`

### Constants
- UPPER_SNAKE_CASE
- Defined in constants.py
- Example: `DEFAULT_CELL_SIZE`, `MAX_OBSTACLES`

## Import Organization

Order imports in this sequence:
1. Standard library imports
2. Third-party imports (pygame, etc.)
3. Local absolute imports (src.ecs, src.game)
4. Blank line between each group

Example:
```
import sys
from pathlib import Path

import pygame

from src.ecs.world import World
from src.ecs.components.position import Position
from src.game.constants import CELL_SIZE
```

## Module Dependencies

Dependency flow (arrows point to dependencies):

```
kobra.py
  ↓
src.core.app
  ↓
src.game.scenes.gameplay
  ↓
src.ecs.systems.* ← src.ecs.components.*
  ↓
src.ecs.world
  ↓
src.game.services.* ← src.game.config, constants, settings
```

Rules:
- Core depends on nothing else in src/
- ECS depends on nothing else in src/
- Game depends on ECS and core
- Scenes depend on everything
- No circular dependencies

## File Size Guidelines

- Components: under 50 lines
- Systems: under 300 lines
- Prefabs: under 100 lines
- Services: under 200 lines
- Config/constants/settings: under 150 lines each

If file exceeds guideline, consider splitting into multiple files.

## Documentation Requirements

Every file must have:
1. Module-level docstring explaining purpose
2. Copyright notice (GPL header)
3. Type hints on all function signatures
4. Docstrings on public classes and functions

Example file header:
```
#!/usr/bin/env python3
#
#   Copyright (c) 2023, Monaco F. J. <monaco@usp.br>
#
#   This file is part of KobraPy.
#
#   KobraPy is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Brief description of module purpose.

More detailed explanation if needed.
"""

import ...
```

## Migration Notes

During migration, we will have duplicate files temporarily:
- Old: `src/entities.py`, `src/state.py`
- New: `src/ecs/components/*`, `src/ecs/systems/*`

Delete old files only after:
1. All functionality migrated to new structure
2. All tests passing
3. Manual testing confirms identical behavior

Mark old files with deprecation comment:
```
# DEPRECATED: This file will be removed after ECS migration.
# See src/ecs/components/ and src/ecs/systems/ for new implementation.
```
